// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arpc_header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_arpc_5fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_arpc_5fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arpc_5fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_arpc_5fheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_arpc_5fheader_2eproto;
class arpc_header;
class arpc_headerDefaultTypeInternal;
extern arpc_headerDefaultTypeInternal _arpc_header_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::arpc_header* Arena::CreateMaybeMessage<::arpc_header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum message_t : int {
  REQUEST = 0,
  RESPONSE = 1,
  UNKNOWN = 2,
  message_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  message_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool message_t_IsValid(int value);
constexpr message_t message_t_MIN = REQUEST;
constexpr message_t message_t_MAX = UNKNOWN;
constexpr int message_t_ARRAYSIZE = message_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* message_t_descriptor();
template<typename T>
inline const std::string& message_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, message_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function message_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    message_t_descriptor(), enum_t_value);
}
inline bool message_t_Parse(
    const std::string& name, message_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<message_t>(
    message_t_descriptor(), name, value);
}
enum error_code : int {
  SUCCESS = 0,
  PROTO = 1,
  SERVICE = 2,
  METHOD = 3,
  INVALID_REQUEST = 4,
  INVALID_RESPONSE = 5,
  TIMEOUT = 6,
  error_code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  error_code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool error_code_IsValid(int value);
constexpr error_code error_code_MIN = SUCCESS;
constexpr error_code error_code_MAX = TIMEOUT;
constexpr int error_code_ARRAYSIZE = error_code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* error_code_descriptor();
template<typename T>
inline const std::string& error_code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, error_code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function error_code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    error_code_descriptor(), enum_t_value);
}
inline bool error_code_Parse(
    const std::string& name, error_code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<error_code>(
    error_code_descriptor(), name, value);
}
// ===================================================================

class arpc_header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arpc_header) */ {
 public:
  arpc_header();
  virtual ~arpc_header();

  arpc_header(const arpc_header& from);
  arpc_header(arpc_header&& from) noexcept
    : arpc_header() {
    *this = ::std::move(from);
  }

  inline arpc_header& operator=(const arpc_header& from) {
    CopyFrom(from);
    return *this;
  }
  inline arpc_header& operator=(arpc_header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const arpc_header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const arpc_header* internal_default_instance() {
    return reinterpret_cast<const arpc_header*>(
               &_arpc_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(arpc_header& a, arpc_header& b) {
    a.Swap(&b);
  }
  inline void Swap(arpc_header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline arpc_header* New() const final {
    return CreateMaybeMessage<arpc_header>(nullptr);
  }

  arpc_header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<arpc_header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const arpc_header& from);
  void MergeFrom(const arpc_header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(arpc_header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arpc_header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arpc_5fheader_2eproto);
    return ::descriptor_table_arpc_5fheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 3,
    kMethodNameFieldNumber = 4,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kArgsSizeFieldNumber = 5,
    kErrorFieldNumber = 6,
  };
  // bytes service_name = 3;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const void* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // bytes method_name = 4;
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const void* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // .message_t type = 1;
  void clear_type();
  ::message_t type() const;
  void set_type(::message_t value);
  private:
  ::message_t _internal_type() const;
  void _internal_set_type(::message_t value);
  public:

  // fixed32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 args_size = 5;
  void clear_args_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 args_size() const;
  void set_args_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_args_size() const;
  void _internal_set_args_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .error_code error = 6;
  void clear_error();
  ::error_code error() const;
  void set_error(::error_code value);
  private:
  ::error_code _internal_error() const;
  void _internal_set_error(::error_code value);
  public:

  // @@protoc_insertion_point(class_scope:arpc_header)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 args_size_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arpc_5fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// arpc_header

// .message_t type = 1;
inline void arpc_header::clear_type() {
  type_ = 0;
}
inline ::message_t arpc_header::_internal_type() const {
  return static_cast< ::message_t >(type_);
}
inline ::message_t arpc_header::type() const {
  // @@protoc_insertion_point(field_get:arpc_header.type)
  return _internal_type();
}
inline void arpc_header::_internal_set_type(::message_t value) {
  
  type_ = value;
}
inline void arpc_header::set_type(::message_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:arpc_header.type)
}

// fixed32 id = 2;
inline void arpc_header::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 arpc_header::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 arpc_header::id() const {
  // @@protoc_insertion_point(field_get:arpc_header.id)
  return _internal_id();
}
inline void arpc_header::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void arpc_header::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:arpc_header.id)
}

// bytes service_name = 3;
inline void arpc_header::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& arpc_header::service_name() const {
  // @@protoc_insertion_point(field_get:arpc_header.service_name)
  return _internal_service_name();
}
inline void arpc_header::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:arpc_header.service_name)
}
inline std::string* arpc_header::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:arpc_header.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& arpc_header::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void arpc_header::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void arpc_header::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arpc_header.service_name)
}
inline void arpc_header::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arpc_header.service_name)
}
inline void arpc_header::set_service_name(const void* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arpc_header.service_name)
}
inline std::string* arpc_header::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* arpc_header::release_service_name() {
  // @@protoc_insertion_point(field_release:arpc_header.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void arpc_header::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:arpc_header.service_name)
}

// bytes method_name = 4;
inline void arpc_header::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& arpc_header::method_name() const {
  // @@protoc_insertion_point(field_get:arpc_header.method_name)
  return _internal_method_name();
}
inline void arpc_header::set_method_name(const std::string& value) {
  _internal_set_method_name(value);
  // @@protoc_insertion_point(field_set:arpc_header.method_name)
}
inline std::string* arpc_header::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable:arpc_header.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& arpc_header::_internal_method_name() const {
  return method_name_.GetNoArena();
}
inline void arpc_header::_internal_set_method_name(const std::string& value) {
  
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void arpc_header::set_method_name(std::string&& value) {
  
  method_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arpc_header.method_name)
}
inline void arpc_header::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arpc_header.method_name)
}
inline void arpc_header::set_method_name(const void* value, size_t size) {
  
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arpc_header.method_name)
}
inline std::string* arpc_header::_internal_mutable_method_name() {
  
  return method_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* arpc_header::release_method_name() {
  // @@protoc_insertion_point(field_release:arpc_header.method_name)
  
  return method_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void arpc_header::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:arpc_header.method_name)
}

// uint32 args_size = 5;
inline void arpc_header::clear_args_size() {
  args_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 arpc_header::_internal_args_size() const {
  return args_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 arpc_header::args_size() const {
  // @@protoc_insertion_point(field_get:arpc_header.args_size)
  return _internal_args_size();
}
inline void arpc_header::_internal_set_args_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  args_size_ = value;
}
inline void arpc_header::set_args_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_args_size(value);
  // @@protoc_insertion_point(field_set:arpc_header.args_size)
}

// .error_code error = 6;
inline void arpc_header::clear_error() {
  error_ = 0;
}
inline ::error_code arpc_header::_internal_error() const {
  return static_cast< ::error_code >(error_);
}
inline ::error_code arpc_header::error() const {
  // @@protoc_insertion_point(field_get:arpc_header.error)
  return _internal_error();
}
inline void arpc_header::_internal_set_error(::error_code value) {
  
  error_ = value;
}
inline void arpc_header::set_error(::error_code value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:arpc_header.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::message_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message_t>() {
  return ::message_t_descriptor();
}
template <> struct is_proto_enum< ::error_code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::error_code>() {
  return ::error_code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_arpc_5fheader_2eproto
